{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_owner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "MemberAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "member",
						"type": "address"
					}
				],
				"name": "MemberRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_member",
						"type": "address"
					}
				],
				"name": "addMember",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_member",
						"type": "address"
					}
				],
				"name": "isMember",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_member",
						"type": "address"
					}
				],
				"name": "removeMember",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "baseToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "targetDex",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "contract IERC20",
						"name": "quoteToken",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "outAmount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeRate",
						"type": "uint256"
					}
				],
				"name": "swap",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"custom:dev-run-script": "./scripts/deploy_with_ethers.ts",
			"details": "perform calls to dex aggregators whitelisted",
			"events": {
				"Paused(address)": {
					"details": "Emitted when the pause is triggered by `account`."
				},
				"Unpaused(address)": {
					"details": "Emitted when the pause is lifted by `account`."
				}
			},
			"kind": "dev",
			"methods": {
				"addMember(address)": {
					"details": "A method to add a member to the whitelist",
					"params": {
						"_member": "The member to add as a member."
					}
				},
				"isMember(address)": {
					"details": "A method to verify whether an address is a member of the whitelist",
					"params": {
						"_member": "The address to verify."
					},
					"returns": {
						"_0": "Whether the address is a member of the whitelist."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"removeMember(address)": {
					"details": "A method to remove a member from the whitelist",
					"params": {
						"_member": "The member to remove as a member."
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"title": "ReadySwapAggregator",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ReadySwapAggregator.sol": "ReadySwapAggregator"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/ReadySwapAggregator.sol": {
			"keccak256": "0x2d682261302e98552671d7ea5d89e5bd307cf3b2a0936003c7875f273af65512",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bbc5fb04e23499884ef8579ce2721513492df2c9b7454c66ff6fa08cca2c3274",
				"dweb:/ipfs/QmQmedSSFWDHL9jHggUH7VrtTG2k9JX3neMbFS68mqGKx6"
			]
		},
		"contracts/helpers/Context.sol": {
			"keccak256": "0x732ed9a6d5f3c9c53cbc22c9cdfb48ef2796172a86d060e8fec0a0eafa6038db",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://4a19c14d4f436e0da41dc41a7ab1136e5642df5ea1432dad511ad0cb2e833c9d",
				"dweb:/ipfs/QmTttgkPXmJcEQMrFKtj4him4E823LR2CQHbX8ERhTy6JP"
			]
		},
		"contracts/helpers/Ownable.sol": {
			"keccak256": "0xfc89d035f3f82c3b8babe828d015ebc3b8100697233e0ffa7a3ffb921f19cd33",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://3bb01842ab8293dfa9bbd32f387ab8825459050e7db18a33168e59fad32f5aaa",
				"dweb:/ipfs/QmREjYm1xx42SSHBq8o9MDxndAvx6xKt5hbbYzQFsDy1YU"
			]
		},
		"contracts/helpers/Pausable.sol": {
			"keccak256": "0xfb8b994c2e9f1275df3e0763e826eff75591c0d26610851aa17f284e448cb56b",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9b6cedc6a79999b0b57c368e759355ca8ec36373b3f5cf557f4699affacf47fa",
				"dweb:/ipfs/QmV6WbTN4dU6VVeLMKMgYGExfcgESjMuvgKW72HoZjNEVj"
			]
		},
		"contracts/helpers/ReentrancyGuard.sol": {
			"keccak256": "0xe1a263c8126eacc8d82969efb14eda7e319e0f570ce9e1abd777e9c11dd152db",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://fd1a2befdec469e97a27b3d3b10357b271631565432a8a63dc4940812e876942",
				"dweb:/ipfs/QmRdPGE5KYo5yeaM9c2Sro9CGtvHgDEsKjRSp1BWrdnaSu"
			]
		},
		"contracts/helpers/Whitelist.sol": {
			"keccak256": "0x22ea921a6237891e53ddcbf049aeaf3791267947e5fd2f318291baf4544d29ea",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://c0d079a6378403fd0ba35d15a11384d2fecb74ef8e1ad73cd6809b10a8812835",
				"dweb:/ipfs/QmchhY2W1PoJ7K5vuQpDxHYH8FLh6inbTX9wo3CnCuS6JN"
			]
		},
		"contracts/interfaces/IERC20.sol": {
			"keccak256": "0x8d5b901a19403a0d23fd8797fcfa21c513f8c1c034f22d48b9b27b86adb8cc04",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ab794ea2092fdfb9bc26f3f55e7aa5ef24293449623d85eee35e538c8fd1a589",
				"dweb:/ipfs/QmPpS6QjnwXhsYaTJ2QDxGRtjc1AzoXoFj5KHUR9cVXrKj"
			]
		},
		"contracts/libraries/Address.sol": {
			"keccak256": "0x32c67e88fb18a8cb6f1e6a5dbfab6d7fc04d598902226b22a08b33821ada2651",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://4aaa7dcd5ea66894cf788b64725a5e9668cd29d1c7cd96ae51f840e133e70c8a",
				"dweb:/ipfs/QmdgGuJJyrc3mMU9pDwofLS8UMBsuwwf2GuSTHWc1NzyXe"
			]
		},
		"contracts/libraries/Math.sol": {
			"keccak256": "0xd940e509879e9f9c393dd9bf0b4758f392dc474272147ab777a0eade72d751f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e06c2cec21c670d6c5813ea906bfb7af7e19102340b8f51ab37a6d2d7fc0f2f",
				"dweb:/ipfs/Qmdjd27vSCJFk4cVouGKyb29uWML2f2Amqi4LdzwwfKGkx"
			]
		},
		"contracts/libraries/SafeERC20.sol": {
			"keccak256": "0x80035092de02dee89e7e5b0e5b093b4899b61ca32f70e471069481aac3497c29",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://582a9a0d762ff5aae517f3c39d970523463fcac74818263e35a884f997aa0d42",
				"dweb:/ipfs/QmYBY9eHqawthVr9MqkVr5gkx9GXxDTigRg7NQqZRFvUC9"
			]
		},
		"contracts/libraries/SafeMath.sol": {
			"keccak256": "0x52942995609f169207ae8b5143789daf62ba42d7f3b9e5de6d32d30097b012cb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e2a4f3fa0607ad00fd5f04725e2be5b9906f50576fdf16d62ff28dd138321eaa",
				"dweb:/ipfs/QmT2znNzNBdFNZF9JJKK6KS5h8qAxN2bVaSb5qVwtSw9J4"
			]
		},
		"contracts/libraries/UniversalERC20.sol": {
			"keccak256": "0x0c2065c3c9cd71fe863c4f01e0a5c6a4db607c19bd7378d5f1c1528e87dc2a5a",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://1dcdd650d1500790466369b77b68bb3986ed9abb6cd391a7abc9c9b2f3c81d25",
				"dweb:/ipfs/QmRDbBvVR39bY68tPJ73efs5648JzASMbRhCiz6gu4E5m2"
			]
		}
	},
	"version": 1
}